const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../../models/emp_type/User');
const Mechanic = require('../../models/emp_type/Mechanic');
const Towing = require('../../models/emp_type/Towing');
const Vendor = require('../../models/emp_type/Vendor');
const Admin = require('../../models/emp_type/Admin');
const upload = require("../../upload"); // Importer multer
const nodemailer = require('nodemailer');
const crypto = require('crypto');
const mechanic = require('../../models/emp_type/Mechanic');
require('dotenv').config();

router.use(express.json());
router.use(express.urlencoded({ extended: true }));

// üîπ Configuration Nodemailer
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
    },
});

// üîπ G√©n√©rer un code de v√©rification al√©atoire
const generateVerificationCode = () => crypto.randomInt(100000, 999999).toString();

// üîπ Inscription d'un nouvel utilisateur avec confirmation de mot de passe et choix du sexe
router.post('/register', async(req, res) => {
    try {
        console.log("üì© Inscription - Donn√©es re√ßues :", req.body);

        let { firstname, lastname, email, phone, password, confirmPassword, sex } = req.body;

        // Nettoyage des entr√©es
        firstname = (firstname && firstname.trim()) || "Utilisateur";
        lastname = (lastname && lastname.trim()) || "Inconnu";
        email = email ? email.trim() : "";
        phone = phone ? phone.trim() : "";
        sex = (sex && sex.trim().toLowerCase()) || "ÿ∞ŸÉÿ±"; // Valeur par d√©faut : masculin

        // V√©rification des champs requis
        if (!email || !phone || !password || !confirmPassword) {
            return res.status(400).json({ error: "Email, t√©l√©phone et mot de passe sont obligatoires." });
        }

        // V√©rification de la correspondance des mots de passe
        if (password !== confirmPassword) {
            return res.status(400).json({ message: "Les mots de passe ne correspondent pas." });
        }

        // V√©rification du mot de passe (8 caract√®res minimum, au moins une lettre et un chiffre)
        const passwordRegex = /^(?=.*\d)(?=.*[a-zA-Z]).{8,}$/;
        if (!passwordRegex.test(password)) {
            return res.status(400).json({
                message: "Le mot de passe doit contenir au moins 8 caract√®res, dont un chiffre et une lettre."
            });
        }

        // V√©rification du sexe (si renseign√©)
        const allowedSexValues = ["ÿ£ŸÜÿ´Ÿâ", "ÿ∞ŸÉÿ±"];
        if (sex && !allowedSexValues.includes(sex)) {
            return res.status(400).json({ message: "Le sexe doit √™tre 'masculin' ou 'f√©minin'." });
        }

        // V√©rifier si l'email est d√©j√† utilis√©
        const existingUserByEmail = await User.findOne({ email });
        if (existingUserByEmail) {
            return res.status(400).json({ message: "email" });
        }

        // V√©rifier si le num√©ro de t√©l√©phone est d√©j√† utilis√©
        const existingUserByPhone = await User.findOne({ phone });
        if (existingUserByPhone) {
            return res.status(400).json({ message: "phone" });
        }

        // Hash du mot de passe
        const hashedPassword = await bcrypt.hash(password, 10);
        const verificationCode = generateVerificationCode();

        // Cr√©ation de l'utilisateur
        const newUser = new User({
            firstname,
            lastname,
            email,
            phone,
            password: hashedPassword,
            verificationCode,
            verified: false,
            role: "ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿπÿßÿØŸä",
            sex
        });

        await newUser.save();

        // Envoi du code de v√©rification par e-mail
        const mailOptions = {
            from: `"Mon App" <${process.env.EMAIL_USER}>`,
            to: email,
            subject: "V√©rification de votre compte",
            html: `
        <p>Bienvenue dans notre application !</p>
        <p>Pour finaliser votre inscription, veuillez entrer le code de v√©rification ci-dessous :</p>
        <h2>${verificationCode}</h2>
        <p>Merci de votre confiance.</p>
    `,

        };


        try {
            await transporter.sendMail(mailOptions);
            console.log(`üìß Email envoy√© √† ${email}`);
        } catch (mailError) {
            console.error("‚ùå Erreur d'envoi d'email :", mailError);
        }

        res.status(201).json({ message: "Utilisateur cr√©√© ! Code de v√©rification envoy√© par e-mail." });

    } catch (error) {
        console.error("‚ùå Erreur lors de l'inscription :", error);
        res.status(500).json({ message: "Erreur serveur." });
    }
});


// üîπ V√©rification du code re√ßu par e-mail
router.post('/verify', async(req, res) => {
    try {
        console.log("üì© V√©rification - Donn√©es re√ßues :", req.body);

        const { email, code } = req.body;

        if (!email || !code) {
            return res.status(400).json({ message: "L'email et le code sont requis." });
        }

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: "Utilisateur non trouv√©." });
        }

        if (user.verificationCode !== code) {
            return res.status(400).json({ message: "Code de v√©rification incorrect." });
        }

        user.verified = true;
        user.verificationCode = null;
        await user.save();

        console.log(`‚úÖ Compte v√©rifi√© pour ${email}`);

        res.json({ message: "Compte v√©rifi√© avec succ√®s !" });

    } catch (error) {
        console.error("‚ùå Erreur lors de la v√©rification :", error);
        res.status(500).json({ message: "Erreur serveur." });
    }
});

// üîπ Envoi d'un code pour r√©initialiser le mot de passe
router.post('/forgot-password', async(req, res) => {
    try {
        const { email } = req.body;

        if (!email) {
            return res.status(400).json({ message: "L'email est requis." });
        }

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: "Utilisateur non trouv√©." });
        }

        const resetCode = generateVerificationCode();
        user.resetCode = resetCode;
        await user.save();

        const mailOptions = {
            from: `"Mon App" <${process.env.EMAIL_USER}>`,
            to: email,
            subject: "R√©initialisation du mot de passe",
            html: `<p>Votre code de r√©initialisation est : <strong>${resetCode}</strong></p>`,
        };

        transporter.sendMail(mailOptions);

        res.json({ message: "Code de r√©initialisation envoy√© √† votre e-mail." });

    } catch (error) {
        console.error("‚ùå Erreur lors de l'envoi du code de r√©initialisation :", error);
        res.status(500).json({ message: "Erreur serveur." });
    }
});

// üîπ R√©initialisation du mot de passe avec confirmation
router.post('/verify-reset-code', async(req, res) => {
    try {
        const { email, resetCode } = req.body;

        if (!email || !resetCode) {
            fcr
            return res.status(400).json({ message: "Email et code de r√©initialisation requis." });
        }

        const user = await User.findOne({ email, resetCode });
        if (!user) {
            return res.status(400).json({ message: "Code incorrect ou utilisateur introuvable." });
        }

        res.json({ message: "Code valide, vous pouvez maintenant r√©initialiser votre mot de passe." });

    } catch (error) {
        console.error("‚ùå Erreur lors de la v√©rification du code :", error);
        res.status(500).json({ message: "Erreur serveur." });
    }
});
router.post('/reset-password', async(req, res) => {
    try {
        const { email, newPassword, confirmNewPassword } = req.body;

        if (!email || !newPassword || !confirmNewPassword) {
            return res.status(400).json({ message: "Tous les champs sont requis." });
        }

        if (newPassword !== confirmNewPassword) {
            return res.status(400).json({ message: "Les mots de passe ne correspondent pas." });
        }

        const user = await User.findOne({ email });
        if (!user || !user.resetCode) {
            return res.status(400).json({ message: "R√©initialisation non autoris√©e." });
        }

        user.password = await bcrypt.hash(newPassword, 10);
        user.resetCode = null; // R√©initialiser le code de r√©cup√©ration
        await user.save();

        res.json({ message: "Mot de passe r√©initialis√© avec succ√®s." });

    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©initialisation du mot de passe :", error);
        res.status(500).json({ message: "Erreur serveur." });
    }
});


router.post('/login', async(req, res) => {
    try {
        console.log("üì© Connexion - Donn√©es re√ßues :", req.body);

        const { email, password } = req.body;

        // V√©rification des champs requis
        if (!email || !password) {
            return res.status(400).json({ message: "Email et mot de passe requis." });
        }

        // Recherche dans Admin
        let user = await Admin.findOne({ email });
        let role = "admin";
        let tokenPayload = {};

        if (!user) {
            // Recherche dans User
            user = await User.findOne({ email });
            if (!user) {
                return res.status(404).json({ message: "Utilisateur non trouv√©." });
            }

            role = user.role;

            // Refuser la connexion si le compte utilisateur n'est pas v√©rifi√©
            if (!user.verified) {
                return res.status(400).json({ 
                    message: "ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿ∫Ÿäÿ± ŸÖŸÅÿπŸÑ", 
                    field: "unverified" 
                  });
            }

            // Pr√©parer les donn√©es communes du token
            tokenPayload = {
                id: user._id,
                role: user.role,
                lastname: user.lastname,
                firstname: user.firstname,
                email: user.email,
                phone: user.phone
            };

            // Ajout des infos sp√©cifiques au r√¥le
            if (role === "ŸÖŸäŸÉÿßŸÜŸäŸÉŸä") {
                const mechanic = await Mechanic.findOne({ userId: user._id });
                if (mechanic) {
                    tokenPayload.businessAddress = mechanic.businessAddress;
                    tokenPayload.phonePro = mechanic.phonePro;
                    tokenPayload.profilePhoto = mechanic.profilePhoto;
                }
            } else if (role === "ÿ®ÿßÿ¶ÿπ ŸÇÿ∑ÿπ ÿßŸÑÿ∫Ÿäÿßÿ±") {
                const vendor = await Vendor.findOne({ userId: user._id });
                if (vendor) {
                    tokenPayload.businessAddress = vendor.businessAddress;
                    tokenPayload.phonePro = vendor.phonePro;
                    tokenPayload.profilePhoto = vendor.profilePhoto;
                }
            } else if (role === "ÿπÿßŸÖŸÑ ÿ≥ÿ≠ÿ® ÿßŸÑÿ≥Ÿäÿßÿ±ÿßÿ™") {
                const towing = await Towing.findOne({ userId: user._id });
                if (towing) {
                    tokenPayload.businessAddress = towing.businessAddress;
                    tokenPayload.phonePro = towing.phonePro;
                    tokenPayload.profilePhoto = towing.profilePhoto;
                }
            }

        } else {
            // Admin : d√©finir les infos minimales
            tokenPayload = {
                id: user._id,
                role: "admin",
                email: user.email
            };
        }

        // V√©rification du mot de passe
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(403).json({ message: "Mot de passe incorrect." });
        }

        // G√©n√©ration du token JWT
        const token = jwt.sign(tokenPayload, process.env.JWT_SECRET, { expiresIn: '7d' });

        res.status(200).json({
            message: `Connexion r√©ussie (${role}) !`,
            token,
            user: tokenPayload
        });

    } catch (error) {
        console.error("‚ùå Erreur lors de la connexion :", error);
        res.status(500).json({ message: "Erreur serveur." });
    }
});


// üîπ Route pour supprimer un utilisateur avec confirmation du mot de passe
router.delete('/delete-account', async(req, res) => {
    try {
        const { email, password } = req.body;

        if (!email || !password) {
            return res.status(400).json({ message: "Email et mot de passe requis." });
        }

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: "Utilisateur non trouv√©." });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: "Mot de passe incorrect." });
        }

        await Mechanic.deleteOne({ userId: user._id });
        await Towing.deleteOne({ userId: user._id });
        await Vendor.deleteOne({ userId: user._id });
        await User.deleteOne({ _id: user._id });

        res.json({ message: "Compte supprim√© avec succ√®s." });

    } catch (error) {
        console.error("‚ùå Erreur lors de la suppression du compte :", error);
        res.status(500).json({ message: "Erreur serveur." });
    }
});
const uploadFields = upload.fields([
    { name: 'profilePhoto', maxCount: 1 },
    { name: 'commerceRegister', maxCount: 1 },
    { name: 'carteidentite', maxCount: 1 }
]);

router.post('/upgrade', uploadFields, async (req, res) => {
    console.log("üì© Body re√ßu :", req.body);
    console.log("üìÇ Fichiers re√ßus :", req.files);

    try {
        const { email, businessAddress, phonePro } = req.body;

        // V√©rification des champs obligatoires
        if (!email || !phonePro || !businessAddress) {
            return res.status(400).json({ message: "L'email, le t√©l√©phone professionnel et l'adresse sont requis." });
        }

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: "Utilisateur non trouv√©." });
        }

        // Afficher le r√¥le exact re√ßu
        console.log("üé≠ R√¥le de l'utilisateur :", user.role);

        // V√©rification du r√¥le
        const validRoles = ["ŸÖŸäŸÉÿßŸÜŸäŸÉŸä", "ÿ®ÿßÿ¶ÿπ ŸÇÿ∑ÿπ ÿßŸÑÿ∫Ÿäÿßÿ±", "ÿπÿßŸÖŸÑ ÿ≥ÿ≠ÿ® ÿßŸÑÿ≥Ÿäÿßÿ±ÿßÿ™"];
        if (!validRoles.includes(user.role.trim())) {
            return res.status(400).json({ message: "Le r√¥le de l'utilisateur est invalide ou non d√©fini." });
        }

        // V√©rification des fichiers requis
        const files = req.files;
        if (!files.profilePhoto || !files.commerceRegister || !files.carteidentite) {
            return res.status(400).json({ message: "Les fichiers (photo, registre de commerce, carte d'identit√©) sont requis." });
        }

        // Donn√©es communes
        const baseData = {
            userId: user._id,
            businessAddress,
            phonePro,
            profilePhoto: files.profilePhoto[0].path,
            commerceRegister: files.commerceRegister[0].path,
            carteidentite: files.carteidentite[0].path
        };

        // Cr√©ation de l'objet selon le r√¥le
        let newEntry;
        const role = user.role.trim();

        if (role === 'ŸÖŸäŸÉÿßŸÜŸäŸÉŸä') {
            console.log("üîß C'est un m√©canicien");
            newEntry = new Mechanic(baseData);
        } else if (role === 'ÿπÿßŸÖŸÑ ÿ≥ÿ≠ÿ® ÿßŸÑÿ≥Ÿäÿßÿ±ÿßÿ™') {
            console.log("üöö C'est un d√©panneur");
            newEntry = new Towing(baseData);
        } else if (role === 'ÿ®ÿßÿ¶ÿπ ŸÇÿ∑ÿπ ÿßŸÑÿ∫Ÿäÿßÿ±') {
            console.log("üî© C'est un vendeur de pi√®ces");
            newEntry = new Vendor(baseData);
        }

        // Sauvegarde et retour
        if (newEntry) {
            await newEntry.save()
                .then(() => {
                    console.log("‚úÖ Donn√©e enregistr√©e avec succ√®s !");
                    res.json({ message: `Utilisateur promu en ${user.role} avec succ√®s !` });
                })
                .catch((err) => {
                    console.error("‚ùå Erreur lors de la sauvegarde :", err);
                    res.status(500).json({ message: "Erreur lors de l'enregistrement en base de donn√©es." });
                });
        } else {
            console.log("‚ö†Ô∏è Aucun mod√®le n'a √©t√© instanci√©.");
            res.status(400).json({ message: "Impossible de cr√©er l'entr√©e pour ce r√¥le." });
        }

    } catch (error) {
        console.error("‚ùå Erreur lors de l'upgrade :", error);
        res.status(500).json({ message: "Erreur serveur." });
    }
});



// üîπ Route pour r√©cup√©rer tous les m√©caniciens
router.get('/mechanics', async(req, res) => {
    try {
        const mechanics = await Mechanic.find().populate('userId', 'firstname lastname email');
        res.json(mechanics);
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des m√©caniciens :", error);
        res.status(500).json({ message: "Erreur serveur." });
    }
});
// üîπ Route pour supprimer un utilisateur d'un r√¥le et r√©initialiser son r√¥le √† "user"
router.delete('/downgrade', async(req, res) => {
    try {
        const { email, password, deleteUser } = req.body;

        if (!email || !password) {
            return res.status(400).json({ message: "Email et mot de passe sont requis." });
        }

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: "Utilisateur non trouv√©." });
        }

        // V√©rifier le mot de passe
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: "Mot de passe incorrect." });
        }

        // Si deleteUser est vrai, on supprime compl√®tement l'utilisateur
        if (deleteUser) {
            await Mechanic.deleteOne({ userId: user._id });
            await Towing.deleteOne({ userId: user._id });
            await Vendor.deleteOne({ userId: user._id });
            await User.deleteOne({ _id: user._id });
            return res.json({ message: "Compte utilisateur supprim√© avec succ√®s." });
        }

        // V√©rifier le r√¥le et supprimer l'entr√©e correspondante
        if (user.role === 'mechanic') {
            await Mechanic.deleteOne({ userId: user._id });
        } else if (user.role === 'towing') {
            await Towing.deleteOne({ userId: user._id });
        } else if (user.role === 'vendor') {
            await Vendor.deleteOne({ userId: user._id });
        } else {
            return res.status(400).json({ message: "L'utilisateur n'a pas de r√¥le sp√©cifique √† supprimer." });
        }

        // Remettre le r√¥le √† "user"
        user.role = 'user';
        await user.save();

        res.json({ message: `Utilisateur r√©trograd√© √† "user" avec succ√®s.` });

    } catch (error) {
        console.error("‚ùå Erreur lors du downgrade :", error);
        res.status(500).json({ message: "Erreur serveur." });
    }
});
router.patch('/update-profile', async(req, res) => {
    try {
        const { email, firstname, lastname, newEmail, phone, phonePro, businessAddress } = req.body;

        if (!email) {
            return res.status(400).json({ message: "Email requis pour identifier l'utilisateur." });
        }

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: "Utilisateur non trouv√©." });
        }

        // ‚úÖ V√©rifier si le nouvel email est d√©j√† utilis√©
        if (newEmail && newEmail !== email) {
            const existing = await User.findOne({ email: newEmail });
            if (existing) {
                return res.status(400).json({ message: "Cet email est d√©j√† utilis√© par un autre utilisateur." });
            }
            user.email = newEmail;
        }

        if (firstname) user.firstname = firstname;
        if (lastname) user.lastname = lastname;
        if (phone) user.phone = phone;

        await user.save();

        // Mise √† jour des informations professionnelles selon le r√¥le
        if (user.role === "ŸÖŸäŸÉÿßŸÜŸäŸÉŸä") {
            const mechanic = await Mechanic.findOne({ userId: user._id });
            if (mechanic) {
                if (phonePro) mechanic.phonePro = phonePro;
                if (businessAddress) mechanic.businessAddress = businessAddress;
                await mechanic.save();
            }
        }

        if (user.role === "ÿ®ÿßÿ¶ÿπ ŸÇÿ∑ÿπ ÿßŸÑÿ∫Ÿäÿßÿ±") {
            const vendor = await Vendor.findOne({ userId: user._id });
            if (vendor) {
                if (phonePro) vendor.phonePro = phonePro;
                if (businessAddress) vendor.businessAddress = businessAddress;
                await vendor.save();
            }
        }

        if (user.role === "ÿπÿßŸÖŸÑ ÿ≥ÿ≠ÿ® ÿßŸÑÿ≥Ÿäÿßÿ±ÿßÿ™") {
            const towing = await Towing.findOne({ userId: user._id });
            if (towing) {
                if (phonePro) towing.phonePro = phonePro;
                if (businessAddress) towing.businessAddress = businessAddress;
                await towing.save();
            }
        }

        // ‚ûî G√©n√©rer un nouveau token √† jour
        const tokenPayload = {
            id: user._id,
            role: user.role,
            lastname: user.lastname,
            firstname: user.firstname,
            email: user.email,
            phone: user.phone
        };

        // Ajouter aussi les nouvelles informations pro au token
        if (user.role === "ŸÖŸäŸÉÿßŸÜŸäŸÉŸä") {
            const mechanic = await Mechanic.findOne({ userId: user._id });
            if (mechanic) {
                tokenPayload.businessAddress = mechanic.businessAddress;
                tokenPayload.phonePro = mechanic.phonePro;
            }
        }

        if (user.role === "ÿ®ÿßÿ¶ÿπ ŸÇÿ∑ÿπ ÿßŸÑÿ∫Ÿäÿßÿ±") {
            const vendor = await Vendor.findOne({ userId: user._id });
            if (vendor) {
                tokenPayload.businessAddress = vendor.businessAddress;
                tokenPayload.phonePro = vendor.phonePro;
            }
        }

        if (user.role === "ÿπÿßŸÖŸÑ ÿ≥ÿ≠ÿ® ÿßŸÑÿ≥Ÿäÿßÿ±ÿßÿ™") {
            const towing = await Towing.findOne({ userId: user._id });
            if (towing) {
                tokenPayload.businessAddress = towing.businessAddress;
                tokenPayload.phonePro = towing.phonePro;
            }
        }

        const newToken = jwt.sign(tokenPayload, process.env.JWT_SECRET, { expiresIn: '7d' });

        res.json({
            user,
            token: newToken
        });

    } catch (error) {
        console.error("‚ùå Erreur modification profil :", error);
        res.status(500).json({ message: "Erreur serveur." });
    }
});


// üîπ Supprimer compte apr√®s saisie du mot de passe 2 fois
router.delete('/delete-account', async(req, res) => {
    try {
        const { email, password1, password2 } = req.body;

        if (!email || !password1 || !password2) {
            return res.status(400).json({ message: "Veuillez saisir les deux mots de passe." });
        }

        if (password1 !== password2) {
            return res.status(400).json({ message: "Les mots de passe ne correspondent pas." });
        }

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: "Utilisateur non trouv√©." });
        }

        const isMatch = await bcrypt.compare(password1, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: "Mot de passe incorrect." });
        }

        // Supprimer l'utilisateur et ses r√¥les associ√©s
        await Mechanic.deleteOne({ userId: user._id });
        await Towing.deleteOne({ userId: user._id });
        await Vendor.deleteOne({ userId: user._id });
        await User.deleteOne({ _id: user._id });

        res.json({ message: "üóëÔ∏è Compte supprim√© avec succ√®s." });

    } catch (error) {
        console.error("‚ùå Erreur suppression compte :", error);
        res.status(500).json({ message: "Erreur serveur." });
    }
});
// üîê Modifier mot de passe
router.patch('/change-password', async(req, res) => {
    try {
        const { email, ancienPassword, nouveauPassword1, nouveauPassword2 } = req.body;

        if (!email || !ancienPassword || !nouveauPassword1 || !nouveauPassword2) {
            return res.status(400).json({ message: "Tous les champs sont requis." });
        }

        if (nouveauPassword1 !== nouveauPassword2) {
            return res.status(400).json({ message: "Les nouveaux mots de passe ne correspondent pas." });
        }

        // üîé V√©rification de la force du nouveau mot de passe
        const passwordRegex = /^(?=.*\d)(?=.*[a-zA-Z]).{8,}$/;
        if (!passwordRegex.test(nouveauPassword1)) {
            return res.status(400).json({
                message: "Le mot de passe doit contenir au moins 8 caract√®res, dont un chiffre et une lettre."
            });
        }

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: "Utilisateur non trouv√©." });
        }

        const isMatch = await bcrypt.compare(ancienPassword, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: "Ancien mot de passe incorrect." });
        }

        const salt = await bcrypt.genSalt(10);
        const hashed = await bcrypt.hash(nouveauPassword1, salt);

        user.password = hashed;
        await user.save();

        res.json({ message: "üîê Mot de passe modifi√© avec succ√®s." });

    } catch (error) {
        console.error("‚ùå Erreur changement mot de passe :", error);
        res.status(500).json({ message: "Erreur serveur." });
    }
});

// üîπ Export du routeur
module.exports = router;